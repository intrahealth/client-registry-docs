{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Summary \u00b6 A Client Registry (CR) holds patient identifers and may include patient demographic information. It is a necessary tool for public health use cases that require managing patients, monitoring outcomes, and conducting case-based surveillance. This CR is an open source and open standards-based implementation that offers the ability to: Assign and look-up unique identifiers, Allow connections from diverse point of service (POS) systems, such as electronic medical record (EMR) systems, that can submit messages in FHIR, and Configure decision rules around patient matching. Caution This implementation does not allow point-of-service systems to get patient demographic information stored in the Client Registry. This is also not a Shared Health Record, nor does it contain patient clinical data. Use Cases \u00b6 The CR is one component in a more complex HIS architecture needed to accomplish important use cases, such as: Deduplicating patients : Sometimes patients have multiple diagnostic results stored within a POS. The Client Registry will link patients based on configurable decision rules so multiple test results for the same patient can be found. Tracking patients lost to clinical care : EMRs are often not interoperable with one another, resulting in difficulty tracking patients as they move between facilities to seek care. A Client Registry will help data managers to track patients, decreasing instances of duplicate and incomplete records, patients LTFU, and sub-optimal care. Caution The Client Registry is not deduplicating or even touching patient clinical and demographic records within point-of-service systems. Instead, it provides a unique identifier to enable use cases like deduplication - which must be an external process. Architecture \u00b6 The Client Registry is not one application, instead it's a set of applications that work together in the Open Health Information Exchange (OpenHIE) architecture to serve point-of-service systems, like EMRs, insurance mechanisms, and labs. Caution This is not an OpenHIE product. It is a prototypical client registry to facilitate discussion among a broad set of stakeholders. The architecture is made up of: The Open Health Information Mediator (OpenHIM) : The OpenHIM is the entrypoint for POS systems, and includes authentication (are you who you say you are?), authorization (what roles do you have permission to fulfill?), and auditing of all transactions. The HAPI FHIR Server : HAPI is the reference FHIR server in Java and scalable into production environments. The ElasticSearch : Elasticsearch is a powerful search engine that is highly performant. An optional UI to view and break matches between records, and to select and chain together decision rules around matching algorithms.","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#summary","text":"A Client Registry (CR) holds patient identifers and may include patient demographic information. It is a necessary tool for public health use cases that require managing patients, monitoring outcomes, and conducting case-based surveillance. This CR is an open source and open standards-based implementation that offers the ability to: Assign and look-up unique identifiers, Allow connections from diverse point of service (POS) systems, such as electronic medical record (EMR) systems, that can submit messages in FHIR, and Configure decision rules around patient matching. Caution This implementation does not allow point-of-service systems to get patient demographic information stored in the Client Registry. This is also not a Shared Health Record, nor does it contain patient clinical data.","title":"Summary"},{"location":"#use-cases","text":"The CR is one component in a more complex HIS architecture needed to accomplish important use cases, such as: Deduplicating patients : Sometimes patients have multiple diagnostic results stored within a POS. The Client Registry will link patients based on configurable decision rules so multiple test results for the same patient can be found. Tracking patients lost to clinical care : EMRs are often not interoperable with one another, resulting in difficulty tracking patients as they move between facilities to seek care. A Client Registry will help data managers to track patients, decreasing instances of duplicate and incomplete records, patients LTFU, and sub-optimal care. Caution The Client Registry is not deduplicating or even touching patient clinical and demographic records within point-of-service systems. Instead, it provides a unique identifier to enable use cases like deduplication - which must be an external process.","title":"Use Cases"},{"location":"#architecture","text":"The Client Registry is not one application, instead it's a set of applications that work together in the Open Health Information Exchange (OpenHIE) architecture to serve point-of-service systems, like EMRs, insurance mechanisms, and labs. Caution This is not an OpenHIE product. It is a prototypical client registry to facilitate discussion among a broad set of stakeholders. The architecture is made up of: The Open Health Information Mediator (OpenHIM) : The OpenHIM is the entrypoint for POS systems, and includes authentication (are you who you say you are?), authorization (what roles do you have permission to fulfill?), and auditing of all transactions. The HAPI FHIR Server : HAPI is the reference FHIR server in Java and scalable into production environments. The ElasticSearch : Elasticsearch is a powerful search engine that is highly performant. An optional UI to view and break matches between records, and to select and chain together decision rules around matching algorithms.","title":"Architecture"},{"location":"configuration/","text":"Server Configuration \u00b6 This Client Registry implementation is a record locator service. Often there are many records of the same person but in many people in different systems. The purpose of the Client Registry is to link patients in different systems, but not to transfer any data, neither clinical records nor demographic data. Caution The Client Registry does not store clinical information. Having the Client Registry enables the ability to create a Shared Health Record in the future. The Client Registry stores the patient demographic data submitted to it in queries. The Client Registry stores demographic data at least in the HAPI FHIR Server, which can have any database backend an implementer chooses to use. ElasticSearch (ES) is an optional search engine, and requires configuration. ES can also store patient data fields selectably. JSON files are used to configure the system. Later iterations will support environment variables and a graphical interface. See https://github.com/openhie/client-registry/tree/master/server/config for example configuration files discussed here. Deciding Between a Standalone or Mediator Configuration \u00b6 A central application is the Client Registry application, as distinct from the larger Client Registry platform. There are two options for running the application, as an OpenHIM mediator or as standalone application. Choose running the app standalone when: For testing, demonstration, or development environments. There are few clients that will connect to managing client authentication and roles will not be a burden. There is no need for an additional layer of auditing. Choose running the app as a mediator when: For production. The central application should be run as a mediator registered in OpenHIM. There are many clients that will need to connect. There is a need to audit transactions. There is an existing health information exchange layer or OpenHIM. One advantage of using the OpenHIM interface is the ability to change settings like the FHIR server. Security and Privacy \u00b6 Many configuration options relate to privacy and security. These steps are critical to address. Whether in standalone or as a mediator, the Client Registry must interact only with known, trusted clients with TLS certificates. Clients must be registered and certificates assigned to them. In standalone mode, the server runs TLS by default, and requires signed certificates. Client certificate needs can be turned off in OpenHIM when running as a mediator and this feature must be regularly audited to ensure security. Connecting Services \u00b6 The default ports are as follows: 3000 : Standalone/mediator application 9200 : ElasticSearch 8080 : HAPI FHIR Server In server/config/config_development_template.json there is a template for configuration. Link to file Contents of server/config/config_development_template.json { \"app\" : { \"port\" : 3000 , \"installed\" : false }, \"mediator\" : { \"api\" : { \"username\" : \"root@openhim.org\" , \"password\" : \"openhim-password\" , \"apiURL\" : \"https://localhost:8080\" , \"trustSelfSigned\" : true , \"urn\" : \"\" }, \"register\" : false }, \"fhirServer\" : { \"baseURL\" : \"http://localhost:8080/clientregistry/fhir\" , \"username\" : \"hapi\" , \"password\" : \"hapi\" }, \"elastic\" : { \"server\" : \"http://localhost:9200\" , \"username\" : \"\" , \"password\" : \"\" , \"max_compilations_rate\" : \"10000/1m\" , \"index\" : \"patients\" }, \"structureDefinition\" : { \"reportRelationship\" : \"patientreport\" }, \"matching\" : { \"tool\" : \"mediator\" }, \"systems\" : { \"openmrs\" : { \"uri\" : \"http://clientregistry.org/openmrs\" }, \"dhis2\" : { \"uri\" : \"http://clientregistry.org/dhis2\" }, \"lims\" : { \"uri\" : \"http://clientregistry.org/lims\" }, \"brokenMatch\" : { \"uri\" : \"http://ihris.org/CR/brokenMatch\" } }, \"sync\" : { \"lastFHIR2ESSync\" : \"1970-01-01T00:00:06\" }, \"__comments\" : { \"matching.tool\" : \"this tells if the app should use mediator algorithms or elasticsearch algorithms for matching, two options mediator and elasticsearch\" } } General App Configuration \u00b6 app.port is the port the application will run on. app.installed can be left to True. This tells the Client Registry to load structure definitions into FHIR Server, otherwise it will not. Mediator App Configuration \u00b6 mediator.register to true if the application will run as a mediator. Or, to false if the app will not run as a mediator. mediator.api.xx settings are only if running as a mediator. mediator.api.username | password must be different. The existing settings are defaults and must be changed when configuring the OpenHIM. mediator.api.trustSelfSigned should be set to false in production or any sensitive environment. True is only for demonstrations. FHIR Server \u00b6 The currently supported FHIR version is R4. fhirServer.baseURL is the default. Note that it may change depending on the way HAPI is installed. It may, for example, default to a baseURL of http://localhost:8080/baseR4/. fhirServer.username | password must be changed from defaults in HAPI. ElasticSearch Configuration \u00b6 For ES, the relationship between patient resources in FHIR and what fields are synchronized in ES must be explicitly defined. This is termed the Report Relationship mapping. One must define what resource to be used (patient) and what fields need to be available in ES. After this, the Client Registry reads these fields, and populates ES with the information. OpenHIM Mediator JSON Configuration \u00b6 If using OpenHIM, it must be configured for proper clients and roles to accept and forward requests from the Client Registry. An example export of a working JSON configuration that can be imported for development purposes is available. Link to file Contents of server/config/mediator.json { \"urn\" : \"urn:uuid:4bc42b2f-b5a8-473d-8207-5dd5c61f0c4a\" , \"version\" : \"0.0.1\" , \"name\" : \"Client Registry\" , \"description\" : \"Uganda Client Registry\" , \"config\" : { \"fhirServer\" : { \"username\" : \"hapi\" , \"password\" : \"hapi\" , \"baseURL\" : \"http://localhost:8080/hapi/fhir\" }, \"elastic\" : { \"server\" : \"http://localhost:9200\" , \"username\" : \"\" , \"password\" : \"\" , \"max_compilations_rate\" : \"10000/1m\" , \"index\" : \"patients\" }, \"matching\" : { \"tool\" : \"elasticsearch\" } }, \"configDefs\" : [{ \"param\" : \"fhirServer\" , \"displayName\" : \"FHIR Server\" , \"description\" : \"FHIR Server Configuration Details\" , \"type\" : \"struct\" , \"template\" : [{ \"type\" : \"string\" , \"description\" : \"The base URL (e.g. http://localhost:8080/hapi/fhir)\" , \"displayName\" : \"Base URL\" , \"param\" : \"baseURL\" }, { \"type\" : \"string\" , \"description\" : \"Username required to access FHIR server\" , \"displayName\" : \"Username\" , \"param\" : \"username\" }, { \"type\" : \"password\" , \"description\" : \"Password required to access FHIR server\" , \"displayName\" : \"Password\" , \"param\" : \"password\" } ], \"values\" : [] }, { \"param\" : \"elastic\" , \"displayName\" : \"Elasticsearch Server\" , \"description\" : \"Elasticsearch Server Configuration Details\" , \"type\" : \"struct\" , \"template\" : [{ \"type\" : \"string\" , \"description\" : \"The base URL (e.g. http://localhost:9200)\" , \"displayName\" : \"Base URL\" , \"param\" : \"server\" }, { \"type\" : \"string\" , \"description\" : \"Username required to access elasticsearch server\" , \"displayName\" : \"Username\" , \"param\" : \"username\" }, { \"type\" : \"password\" , \"description\" : \"Password required to access elasticsearch server\" , \"displayName\" : \"Password\" , \"param\" : \"password\" }, { \"type\" : \"string\" , \"description\" : \"Number of requests to compile per minute\" , \"displayName\" : \"Maximum Compilations Rate\" , \"param\" : \"max_compilations_rate\" }, { \"type\" : \"string\" , \"description\" : \"index to use for data storage\" , \"displayName\" : \"Index Name\" , \"param\" : \"index\" } ], \"values\" : [] }, { \"param\" : \"matching\" , \"displayName\" : \"FHIR Server\" , \"description\" : \"FHIR Server Configuration Details\" , \"type\" : \"struct\" , \"template\" : [{ \"type\" : \"option\" , \"values\" : [ \"mediator\" , \"elasticsearch\" ], \"description\" : \"Tool to Use for Matching\" , \"displayName\" : \"Tool to Use for Matching\" , \"param\" : \"tool\" }], \"values\" : [] }], \"defaultChannelConfig\" : [{ \"requestBody\" : true , \"responseBody\" : true , \"name\" : \"Add Patients\" , \"description\" : \"Post a new patient into the client registry\" , \"urlPattern\" : \"/addPatient\" , \"matchContentRegex\" : null , \"matchContentXpath\" : null , \"matchContentValue\" : null , \"matchContentJson\" : null , \"pollingSchedule\" : null , \"tcpHost\" : null , \"tcpPort\" : null , \"autoRetryPeriodMinutes\" : 60 , \"autoRetryEnabled\" : false , \"rewriteUrlsConfig\" : [], \"addAutoRewriteRules\" : true , \"rewriteUrls\" : false , \"status\" : \"enabled\" , \"alerts\" : [], \"txRerunAcl\" : [], \"txViewFullAcl\" : [], \"txViewAcl\" : [], \"properties\" : [], \"matchContentTypes\" : [], \"routes\" : [{ \"name\" : \"Add Patient\" , \"secured\" : false , \"host\" : \"localhost\" , \"port\" : 3000 , \"path\" : \"/addPatient\" , \"pathTransform\" : \"\" , \"primary\" : true , \"username\" : \"\" , \"password\" : \"\" , \"forwardAuthHeader\" : false , \"status\" : \"enabled\" , \"type\" : \"http\" }], \"authType\" : \"public\" , \"whitelist\" : [], \"allow\" : [], \"type\" : \"http\" , \"methods\" : [ \"POST\" ] }], \"endpoints\" : [{ \"name\" : \"Activate Client Registry\" , \"host\" : \"localhost\" , \"path\" : \"/addPatient\" , \"port\" : 3000 , \"primary\" : true , \"forwardAuthHeader\" : false , \"status\" : \"enabled\" , \"type\" : \"http\" }], \"_uptime\" : 2201.945 , \"_lastHeartbeat\" : \"2017-12-15T03:47:03.365Z\" , \"_configModifiedTS\" : \"2017-12-15T02:52:49.054Z\" }","title":"Server Configuration"},{"location":"configuration/#server-configuration","text":"This Client Registry implementation is a record locator service. Often there are many records of the same person but in many people in different systems. The purpose of the Client Registry is to link patients in different systems, but not to transfer any data, neither clinical records nor demographic data. Caution The Client Registry does not store clinical information. Having the Client Registry enables the ability to create a Shared Health Record in the future. The Client Registry stores the patient demographic data submitted to it in queries. The Client Registry stores demographic data at least in the HAPI FHIR Server, which can have any database backend an implementer chooses to use. ElasticSearch (ES) is an optional search engine, and requires configuration. ES can also store patient data fields selectably. JSON files are used to configure the system. Later iterations will support environment variables and a graphical interface. See https://github.com/openhie/client-registry/tree/master/server/config for example configuration files discussed here.","title":"Server Configuration"},{"location":"configuration/#deciding-between-a-standalone-or-mediator-configuration","text":"A central application is the Client Registry application, as distinct from the larger Client Registry platform. There are two options for running the application, as an OpenHIM mediator or as standalone application. Choose running the app standalone when: For testing, demonstration, or development environments. There are few clients that will connect to managing client authentication and roles will not be a burden. There is no need for an additional layer of auditing. Choose running the app as a mediator when: For production. The central application should be run as a mediator registered in OpenHIM. There are many clients that will need to connect. There is a need to audit transactions. There is an existing health information exchange layer or OpenHIM. One advantage of using the OpenHIM interface is the ability to change settings like the FHIR server.","title":"Deciding Between a Standalone or Mediator Configuration"},{"location":"configuration/#security-and-privacy","text":"Many configuration options relate to privacy and security. These steps are critical to address. Whether in standalone or as a mediator, the Client Registry must interact only with known, trusted clients with TLS certificates. Clients must be registered and certificates assigned to them. In standalone mode, the server runs TLS by default, and requires signed certificates. Client certificate needs can be turned off in OpenHIM when running as a mediator and this feature must be regularly audited to ensure security.","title":"Security and Privacy"},{"location":"configuration/#connecting-services","text":"The default ports are as follows: 3000 : Standalone/mediator application 9200 : ElasticSearch 8080 : HAPI FHIR Server In server/config/config_development_template.json there is a template for configuration. Link to file Contents of server/config/config_development_template.json { \"app\" : { \"port\" : 3000 , \"installed\" : false }, \"mediator\" : { \"api\" : { \"username\" : \"root@openhim.org\" , \"password\" : \"openhim-password\" , \"apiURL\" : \"https://localhost:8080\" , \"trustSelfSigned\" : true , \"urn\" : \"\" }, \"register\" : false }, \"fhirServer\" : { \"baseURL\" : \"http://localhost:8080/clientregistry/fhir\" , \"username\" : \"hapi\" , \"password\" : \"hapi\" }, \"elastic\" : { \"server\" : \"http://localhost:9200\" , \"username\" : \"\" , \"password\" : \"\" , \"max_compilations_rate\" : \"10000/1m\" , \"index\" : \"patients\" }, \"structureDefinition\" : { \"reportRelationship\" : \"patientreport\" }, \"matching\" : { \"tool\" : \"mediator\" }, \"systems\" : { \"openmrs\" : { \"uri\" : \"http://clientregistry.org/openmrs\" }, \"dhis2\" : { \"uri\" : \"http://clientregistry.org/dhis2\" }, \"lims\" : { \"uri\" : \"http://clientregistry.org/lims\" }, \"brokenMatch\" : { \"uri\" : \"http://ihris.org/CR/brokenMatch\" } }, \"sync\" : { \"lastFHIR2ESSync\" : \"1970-01-01T00:00:06\" }, \"__comments\" : { \"matching.tool\" : \"this tells if the app should use mediator algorithms or elasticsearch algorithms for matching, two options mediator and elasticsearch\" } }","title":"Connecting Services"},{"location":"configuration/#general-app-configuration","text":"app.port is the port the application will run on. app.installed can be left to True. This tells the Client Registry to load structure definitions into FHIR Server, otherwise it will not.","title":"General App Configuration"},{"location":"configuration/#mediator-app-configuration","text":"mediator.register to true if the application will run as a mediator. Or, to false if the app will not run as a mediator. mediator.api.xx settings are only if running as a mediator. mediator.api.username | password must be different. The existing settings are defaults and must be changed when configuring the OpenHIM. mediator.api.trustSelfSigned should be set to false in production or any sensitive environment. True is only for demonstrations.","title":"Mediator App Configuration"},{"location":"configuration/#fhir-server","text":"The currently supported FHIR version is R4. fhirServer.baseURL is the default. Note that it may change depending on the way HAPI is installed. It may, for example, default to a baseURL of http://localhost:8080/baseR4/. fhirServer.username | password must be changed from defaults in HAPI.","title":"FHIR Server"},{"location":"configuration/#elasticsearch-configuration","text":"For ES, the relationship between patient resources in FHIR and what fields are synchronized in ES must be explicitly defined. This is termed the Report Relationship mapping. One must define what resource to be used (patient) and what fields need to be available in ES. After this, the Client Registry reads these fields, and populates ES with the information.","title":"ElasticSearch Configuration"},{"location":"configuration/#openhim-mediator-json-configuration","text":"If using OpenHIM, it must be configured for proper clients and roles to accept and forward requests from the Client Registry. An example export of a working JSON configuration that can be imported for development purposes is available. Link to file Contents of server/config/mediator.json { \"urn\" : \"urn:uuid:4bc42b2f-b5a8-473d-8207-5dd5c61f0c4a\" , \"version\" : \"0.0.1\" , \"name\" : \"Client Registry\" , \"description\" : \"Uganda Client Registry\" , \"config\" : { \"fhirServer\" : { \"username\" : \"hapi\" , \"password\" : \"hapi\" , \"baseURL\" : \"http://localhost:8080/hapi/fhir\" }, \"elastic\" : { \"server\" : \"http://localhost:9200\" , \"username\" : \"\" , \"password\" : \"\" , \"max_compilations_rate\" : \"10000/1m\" , \"index\" : \"patients\" }, \"matching\" : { \"tool\" : \"elasticsearch\" } }, \"configDefs\" : [{ \"param\" : \"fhirServer\" , \"displayName\" : \"FHIR Server\" , \"description\" : \"FHIR Server Configuration Details\" , \"type\" : \"struct\" , \"template\" : [{ \"type\" : \"string\" , \"description\" : \"The base URL (e.g. http://localhost:8080/hapi/fhir)\" , \"displayName\" : \"Base URL\" , \"param\" : \"baseURL\" }, { \"type\" : \"string\" , \"description\" : \"Username required to access FHIR server\" , \"displayName\" : \"Username\" , \"param\" : \"username\" }, { \"type\" : \"password\" , \"description\" : \"Password required to access FHIR server\" , \"displayName\" : \"Password\" , \"param\" : \"password\" } ], \"values\" : [] }, { \"param\" : \"elastic\" , \"displayName\" : \"Elasticsearch Server\" , \"description\" : \"Elasticsearch Server Configuration Details\" , \"type\" : \"struct\" , \"template\" : [{ \"type\" : \"string\" , \"description\" : \"The base URL (e.g. http://localhost:9200)\" , \"displayName\" : \"Base URL\" , \"param\" : \"server\" }, { \"type\" : \"string\" , \"description\" : \"Username required to access elasticsearch server\" , \"displayName\" : \"Username\" , \"param\" : \"username\" }, { \"type\" : \"password\" , \"description\" : \"Password required to access elasticsearch server\" , \"displayName\" : \"Password\" , \"param\" : \"password\" }, { \"type\" : \"string\" , \"description\" : \"Number of requests to compile per minute\" , \"displayName\" : \"Maximum Compilations Rate\" , \"param\" : \"max_compilations_rate\" }, { \"type\" : \"string\" , \"description\" : \"index to use for data storage\" , \"displayName\" : \"Index Name\" , \"param\" : \"index\" } ], \"values\" : [] }, { \"param\" : \"matching\" , \"displayName\" : \"FHIR Server\" , \"description\" : \"FHIR Server Configuration Details\" , \"type\" : \"struct\" , \"template\" : [{ \"type\" : \"option\" , \"values\" : [ \"mediator\" , \"elasticsearch\" ], \"description\" : \"Tool to Use for Matching\" , \"displayName\" : \"Tool to Use for Matching\" , \"param\" : \"tool\" }], \"values\" : [] }], \"defaultChannelConfig\" : [{ \"requestBody\" : true , \"responseBody\" : true , \"name\" : \"Add Patients\" , \"description\" : \"Post a new patient into the client registry\" , \"urlPattern\" : \"/addPatient\" , \"matchContentRegex\" : null , \"matchContentXpath\" : null , \"matchContentValue\" : null , \"matchContentJson\" : null , \"pollingSchedule\" : null , \"tcpHost\" : null , \"tcpPort\" : null , \"autoRetryPeriodMinutes\" : 60 , \"autoRetryEnabled\" : false , \"rewriteUrlsConfig\" : [], \"addAutoRewriteRules\" : true , \"rewriteUrls\" : false , \"status\" : \"enabled\" , \"alerts\" : [], \"txRerunAcl\" : [], \"txViewFullAcl\" : [], \"txViewAcl\" : [], \"properties\" : [], \"matchContentTypes\" : [], \"routes\" : [{ \"name\" : \"Add Patient\" , \"secured\" : false , \"host\" : \"localhost\" , \"port\" : 3000 , \"path\" : \"/addPatient\" , \"pathTransform\" : \"\" , \"primary\" : true , \"username\" : \"\" , \"password\" : \"\" , \"forwardAuthHeader\" : false , \"status\" : \"enabled\" , \"type\" : \"http\" }], \"authType\" : \"public\" , \"whitelist\" : [], \"allow\" : [], \"type\" : \"http\" , \"methods\" : [ \"POST\" ] }], \"endpoints\" : [{ \"name\" : \"Activate Client Registry\" , \"host\" : \"localhost\" , \"path\" : \"/addPatient\" , \"port\" : 3000 , \"primary\" : true , \"forwardAuthHeader\" : false , \"status\" : \"enabled\" , \"type\" : \"http\" }], \"_uptime\" : 2201.945 , \"_lastHeartbeat\" : \"2017-12-15T03:47:03.365Z\" , \"_configModifiedTS\" : \"2017-12-15T02:52:49.054Z\" }","title":"OpenHIM Mediator JSON Configuration"},{"location":"contributing/","text":"Contributing \u00b6 There may be many areas of potential contribution as the Client Registry is not one application, it's several and can be more than that in your use case. It's recommended that you identify the specific feature or use case that needs support and For a quick question, reach out on the iHRIS Slack team. Sign up here For a bug or feature, reach out to the relevant repository to share the information. See the developer page for links to the different applications. For a broader discussion with others interested and with a background in Client Registry implementation science, please join the OpenHIE Client Registry Community calls and get involved.","title":"Contributing"},{"location":"contributing/#contributing","text":"There may be many areas of potential contribution as the Client Registry is not one application, it's several and can be more than that in your use case. It's recommended that you identify the specific feature or use case that needs support and For a quick question, reach out on the iHRIS Slack team. Sign up here For a bug or feature, reach out to the relevant repository to share the information. See the developer page for links to the different applications. For a broader discussion with others interested and with a background in Client Registry implementation science, please join the OpenHIE Client Registry Community calls and get involved.","title":"Contributing"},{"location":"decision_rules/","text":"Decision Rules \u00b6 Overview \u00b6 Demographic data from submitting systems is stored in HAPI FHIR. It is also recommended that the demographic data that is primarily stored in HAPI FHIR be indexed into Elasticsearch. For match processing, there are two options. One is run in mediator-only mode, which is highly flexible and supports a handful of algorithms that can be chained together. Additional algorithms can be added as needed. The second is to use ES. ES is very fast and supports compound queries but currently only supports Levenshtein distance. When using ES, every request to the FHIR Server is cached in ES. (One additional caveat for Levenshtein distance is that the mediator-only matching can support edit distances exceeding two, while ES edit distance cannot exceed two.) Every client wishing to use the Client Registry must be authenticated and authorized. See the configuration page for more information. How to Set Decision Rules \u00b6 Decision rules determine how matches are made among records, for example, by using a certain algorithm on one field and a different algorithm on another. Let's use the below example: rules.givenName is used as one rule on the field givenName. rules.givenName.algorithm defines an algorithm, in this instance Jaro-Winkler, and an threshold for that algorithm unique to it. rules.givenName.path is a required FHIRpath for the fields, a standard way to define how to traverse a FHIR resource. In future, a GUI may be used for defining the FHIRpath. By default, all of the rules are chained together in a logical AND statement. In ES the search queries are assembled into compound queries. Link to file Contents of server/config/decision_rules.json { \"__comments\" : { \"path\" : \"Its a fhir path, for syntax refer to https://www.hl7.org/fhir/fhirpath.html\" , \"type\" : \"String, Date, Number or Boolean\" , \"threshold\" : { \"levenshtein\" : \"Lower the number, the closer the match, 0 being exact match\" , \"jaro-winkler\" : \"number between 0 and 1, where 0 for no match and 1 for exact match\" } }, \"rules\" : { \"givenName\" : { \"algorithm\" : \"jaro-winkler\" , \"threshold\" : 0.89 , \"path\" : \"name.where(use='official').last().given\" , \"type\" : \"string\" , \"systems\" : [ \"system1\" , \"system2\" , \"system3\" ] }, \"familyName\" : { \"algorithm\" : \"damerau-levenshtein\" , \"threshold\" : 3 , \"path\" : \"name.where(use='official').last().family\" , \"type\" : \"String\" }, \"gender\" : { \"algorithm\" : \"exact\" , \"path\" : \"gender\" , \"type\" : \"String\" } } }","title":"Decision Rules"},{"location":"decision_rules/#decision-rules","text":"","title":"Decision Rules"},{"location":"decision_rules/#overview","text":"Demographic data from submitting systems is stored in HAPI FHIR. It is also recommended that the demographic data that is primarily stored in HAPI FHIR be indexed into Elasticsearch. For match processing, there are two options. One is run in mediator-only mode, which is highly flexible and supports a handful of algorithms that can be chained together. Additional algorithms can be added as needed. The second is to use ES. ES is very fast and supports compound queries but currently only supports Levenshtein distance. When using ES, every request to the FHIR Server is cached in ES. (One additional caveat for Levenshtein distance is that the mediator-only matching can support edit distances exceeding two, while ES edit distance cannot exceed two.) Every client wishing to use the Client Registry must be authenticated and authorized. See the configuration page for more information.","title":"Overview"},{"location":"decision_rules/#how-to-set-decision-rules","text":"Decision rules determine how matches are made among records, for example, by using a certain algorithm on one field and a different algorithm on another. Let's use the below example: rules.givenName is used as one rule on the field givenName. rules.givenName.algorithm defines an algorithm, in this instance Jaro-Winkler, and an threshold for that algorithm unique to it. rules.givenName.path is a required FHIRpath for the fields, a standard way to define how to traverse a FHIR resource. In future, a GUI may be used for defining the FHIRpath. By default, all of the rules are chained together in a logical AND statement. In ES the search queries are assembled into compound queries. Link to file Contents of server/config/decision_rules.json { \"__comments\" : { \"path\" : \"Its a fhir path, for syntax refer to https://www.hl7.org/fhir/fhirpath.html\" , \"type\" : \"String, Date, Number or Boolean\" , \"threshold\" : { \"levenshtein\" : \"Lower the number, the closer the match, 0 being exact match\" , \"jaro-winkler\" : \"number between 0 and 1, where 0 for no match and 1 for exact match\" } }, \"rules\" : { \"givenName\" : { \"algorithm\" : \"jaro-winkler\" , \"threshold\" : 0.89 , \"path\" : \"name.where(use='official').last().given\" , \"type\" : \"string\" , \"systems\" : [ \"system1\" , \"system2\" , \"system3\" ] }, \"familyName\" : { \"algorithm\" : \"damerau-levenshtein\" , \"threshold\" : 3 , \"path\" : \"name.where(use='official').last().family\" , \"type\" : \"String\" }, \"gender\" : { \"algorithm\" : \"exact\" , \"path\" : \"gender\" , \"type\" : \"String\" } } }","title":"How to Set Decision Rules"},{"location":"docker/","text":"Docker \u00b6 Warning The latest tag is not supported by ES. Under construction.","title":"Docker"},{"location":"docker/#docker","text":"Warning The latest tag is not supported by ES. Under construction.","title":"Docker"},{"location":"get_started/","text":"Getting Started \u00b6 Note Regardless if you're just curious, an implementer, or a developer... please review the introduction before continuing. We tried to keep it short. I'm an implementer : The workflow and decision rules pages explain the basics and have links to resources to learn and teach others how to understand it and run it in an organization. I'm a developer or systems administrator : The installation and configuration pages goes into more detail about setup and configure the Client Registry. I'm a manager in charge of matching and decision rules. The decision rules pages is an overview of how matching is configured. I'm a contributor : This is a community project and meant for others to adopt to their use cases as they wish. The contributing page goes into how to make different types of contributions.","title":"Getting Started"},{"location":"get_started/#getting-started","text":"Note Regardless if you're just curious, an implementer, or a developer... please review the introduction before continuing. We tried to keep it short. I'm an implementer : The workflow and decision rules pages explain the basics and have links to resources to learn and teach others how to understand it and run it in an organization. I'm a developer or systems administrator : The installation and configuration pages goes into more detail about setup and configure the Client Registry. I'm a manager in charge of matching and decision rules. The decision rules pages is an overview of how matching is configured. I'm a contributor : This is a community project and meant for others to adopt to their use cases as they wish. The contributing page goes into how to make different types of contributions.","title":"Getting Started"},{"location":"installation/","text":"Installation (Non-Production) \u00b6 Warning This guide is for demonstrations or tests only, not for production environments. Note This installation method requires familiarity with the command line. HAPI FHIR Server CLI \u00b6 For non-production environments, the HAPI maintainers provide a simple CLI-based tool to run it. The only required dependency is Java >= 8 (1.8). See HAPI FHIR CLI for instructions for the OS of choice. The Client Registry requires FHIR version R4 and HAPI must be started for this version. To run HAPI: hapi-fhir-cli run-server -v r4 The HAPI Web Testing UI is available at http://localhost:8080/ The Web Testing UI should be disabled for production. It allows the viewing of any resource on the server. The FHIR Base URL is at http://localhost:8080/baseR4/ Visit http://localhost:8080/ to ensure HAPI is up and running or curl -X GET \"localhost:8080/baseR4/Patient?\" ElasticSearch (Optional) \u00b6 By default, the configuration does not require ES but including it will enable ES-based matching. Install and start ES for the intended OS. See the ES install instructions The required version is >=7.5. Once installed and started, ensure that ES is up and running: curl -X GET \"localhost:9200/_cat/health?v&pretty\" Status should be yellow for a single-node cluster. Mediator \u00b6 Clone the repository into a directory of choice. git clone https://github.com/intrahealth/client-registry.git Enter the server directory, install node packages. cd client-registry/server npm install Copy and edit the configuration file to your liking. cp config/config_development_template.json config/config_development.json # edit the servers... The minimum changes to start a running standalone system are: Change fhirServer.baseURL to \"http://localhost:8080/baseR4/\" Run the server from inside client-registry/server: node lib/app.js Troubleshooting \u00b6 Symptom : The app does not run due to an error accessing client-registry/server/lib/../../resources/SearchParameter . The solution is to create an empty folder for client-registry/resources/SearchParameter . For example: mkdir $HOME /src/github.com/intrahealth/client-registry/resources/SearchParameter Symptom : There is an error trying to use the FHIR Structure Definition resource for patient. This is because the SD for patient does not exist. { resourceType: 'OperationOutcome', text: { status: 'generated', div: '<div xmlns=\"http://www.w3.org/1999/xhtml\"><h1>Operation Outcome</h1><table border=\"0\"><tr><td style=\"font-weight: bold;\">ERROR</td><td>[]</td><td><pre>Resource StructureDefinition/Patient not found, specified in path: Basic.subject</pre></td>\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t</tr>\\n\\t\\t</table>\\n\\t</div>' }, issue: [ { severity: 'error', code: 'processing', diagnostics: 'Resource StructureDefinition/Patient not found, specified in path: Basic.subject' } ] } The solution is to load a FHIR SD for patient. This can be done directly using the HAPI FHIR Web Testing UI for Structure Definition resource --> CRUD Operations --> UPDATE and indicating the id as Patient, and pasting in the SD for patient. Alternatively, hapi-fhir-cli offers a tool to update all SD and ValueSets. In another terminal: hapi-fhir-cli upload-definitions -v r4 -t http://localhost:8080/baseR4/ There may be some errors, but the correct patient SD will be loaded. After a successful load the correct output is: { resourceType: 'Basic', id: 'patientreport', meta: { versionId: '1', lastUpdated: '2020-01-28T10:58:16.860+00:00', profile: [ 'http://ihris.org/fhir/StructureDefinition/iHRISRelationship' ] }, extension: [ { url: 'http://ihris.org/fhir/StructureDefinition/iHRISReportDetails', extension: [Array] } ], code: { coding: [ [Object] ], text: 'iHRISRelationship' }, subject: { reference: 'StructureDefinition/Patient' } }","title":"Installation (Non-Production)"},{"location":"installation/#installation-non-production","text":"Warning This guide is for demonstrations or tests only, not for production environments. Note This installation method requires familiarity with the command line.","title":"Installation (Non-Production)"},{"location":"installation/#hapi-fhir-server-cli","text":"For non-production environments, the HAPI maintainers provide a simple CLI-based tool to run it. The only required dependency is Java >= 8 (1.8). See HAPI FHIR CLI for instructions for the OS of choice. The Client Registry requires FHIR version R4 and HAPI must be started for this version. To run HAPI: hapi-fhir-cli run-server -v r4 The HAPI Web Testing UI is available at http://localhost:8080/ The Web Testing UI should be disabled for production. It allows the viewing of any resource on the server. The FHIR Base URL is at http://localhost:8080/baseR4/ Visit http://localhost:8080/ to ensure HAPI is up and running or curl -X GET \"localhost:8080/baseR4/Patient?\"","title":"HAPI FHIR Server CLI"},{"location":"installation/#elasticsearch-optional","text":"By default, the configuration does not require ES but including it will enable ES-based matching. Install and start ES for the intended OS. See the ES install instructions The required version is >=7.5. Once installed and started, ensure that ES is up and running: curl -X GET \"localhost:9200/_cat/health?v&pretty\" Status should be yellow for a single-node cluster.","title":"ElasticSearch (Optional)"},{"location":"installation/#mediator","text":"Clone the repository into a directory of choice. git clone https://github.com/intrahealth/client-registry.git Enter the server directory, install node packages. cd client-registry/server npm install Copy and edit the configuration file to your liking. cp config/config_development_template.json config/config_development.json # edit the servers... The minimum changes to start a running standalone system are: Change fhirServer.baseURL to \"http://localhost:8080/baseR4/\" Run the server from inside client-registry/server: node lib/app.js","title":"Mediator"},{"location":"installation/#troubleshooting","text":"Symptom : The app does not run due to an error accessing client-registry/server/lib/../../resources/SearchParameter . The solution is to create an empty folder for client-registry/resources/SearchParameter . For example: mkdir $HOME /src/github.com/intrahealth/client-registry/resources/SearchParameter Symptom : There is an error trying to use the FHIR Structure Definition resource for patient. This is because the SD for patient does not exist. { resourceType: 'OperationOutcome', text: { status: 'generated', div: '<div xmlns=\"http://www.w3.org/1999/xhtml\"><h1>Operation Outcome</h1><table border=\"0\"><tr><td style=\"font-weight: bold;\">ERROR</td><td>[]</td><td><pre>Resource StructureDefinition/Patient not found, specified in path: Basic.subject</pre></td>\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t</tr>\\n\\t\\t</table>\\n\\t</div>' }, issue: [ { severity: 'error', code: 'processing', diagnostics: 'Resource StructureDefinition/Patient not found, specified in path: Basic.subject' } ] } The solution is to load a FHIR SD for patient. This can be done directly using the HAPI FHIR Web Testing UI for Structure Definition resource --> CRUD Operations --> UPDATE and indicating the id as Patient, and pasting in the SD for patient. Alternatively, hapi-fhir-cli offers a tool to update all SD and ValueSets. In another terminal: hapi-fhir-cli upload-definitions -v r4 -t http://localhost:8080/baseR4/ There may be some errors, but the correct patient SD will be loaded. After a successful load the correct output is: { resourceType: 'Basic', id: 'patientreport', meta: { versionId: '1', lastUpdated: '2020-01-28T10:58:16.860+00:00', profile: [ 'http://ihris.org/fhir/StructureDefinition/iHRISRelationship' ] }, extension: [ { url: 'http://ihris.org/fhir/StructureDefinition/iHRISReportDetails', extension: [Array] } ], code: { coding: [ [Object] ], text: 'iHRISRelationship' }, subject: { reference: 'StructureDefinition/Patient' } }","title":"Troubleshooting"},{"location":"openmrs/","text":"OpenMRS MPI Client \u00b6 Under construction.","title":"OpenMRS MPI Client"},{"location":"openmrs/#openmrs-mpi-client","text":"Under construction.","title":"OpenMRS MPI Client"},{"location":"production/","text":"Production Considerations \u00b6 This page is under construction. Warning Server and network hardening and production best practices are out of scope. This document only attempts to capture aspects relevant to the Client Registry. Hardening and production best practices include: Removing unnecessary services, software, network protocols Backup and recovery Patches Vulnerability scanning Limiting remote administration Managing open internal and external ports Auditing, logging software See the Guide to General Server Security: Recommendations of the National Institute of Standards and Technology (Karen Scarfone Wayne Jansen Miles Tracy, July 2008, NIST Special Publication 800-123) Memory Usage \u00b6 Memory usage depends on the number of records and the performance required. For local development on a PC: PC with multiple cores 8GB of RAM should be available For production, at minimum: 32GB with 24GB free for the Client Registry is recommended for light loads if using one VM. 16GB minimum for ElasticSearch with 32GB preferred or 64GB for high volume: Follow the guidelines provided by the maintainers here . Use 2-8 cores. 8GB for OpenHIM, mediator, Postgres, and HAPI FHIR Server. Benchmarking will be completed in future phases to make recommendations for heavy workloads.","title":"Production Considerations"},{"location":"production/#production-considerations","text":"This page is under construction. Warning Server and network hardening and production best practices are out of scope. This document only attempts to capture aspects relevant to the Client Registry. Hardening and production best practices include: Removing unnecessary services, software, network protocols Backup and recovery Patches Vulnerability scanning Limiting remote administration Managing open internal and external ports Auditing, logging software See the Guide to General Server Security: Recommendations of the National Institute of Standards and Technology (Karen Scarfone Wayne Jansen Miles Tracy, July 2008, NIST Special Publication 800-123)","title":"Production Considerations"},{"location":"production/#memory-usage","text":"Memory usage depends on the number of records and the performance required. For local development on a PC: PC with multiple cores 8GB of RAM should be available For production, at minimum: 32GB with 24GB free for the Client Registry is recommended for light loads if using one VM. 16GB minimum for ElasticSearch with 32GB preferred or 64GB for high volume: Follow the guidelines provided by the maintainers here . Use 2-8 cores. 8GB for OpenHIM, mediator, Postgres, and HAPI FHIR Server. Benchmarking will be completed in future phases to make recommendations for heavy workloads.","title":"Memory Usage"},{"location":"queries/","text":"Queries \u00b6 Certificates (Mandatory) \u00b6 A system querying the Client Registry needs a server-issued certificate or it will not be authorized to use the service. The way that this works is that a server creates a certificate for a client. The certificate is signed by the server issuing it. The querying system then uses that certificate that has been issued to them in their requests. The server's public key is used by the querying system to verify that the certificate being sent is how the server verifies that the certificate was created by them. There is a set of generated certificates for testing and demonstrations. They are not appropriate for production. A Simple CLI Query \u00b6 Inside /client-registry/server directory, a cURL query using the provided example JSON file would be: curl --cert sampleclientcertificates/openmrs.p12 --cert-type p12 --cacert certificates/server_cert.pem -d @/Users/richard/src/github.com/openhie/client-registry/DemoData/patient1_openmrs.json -H \"Content-Type: application/json\" -XPOST https://localhost:3000/addPatient Should result in a successful result in stdout: info: Received a request to add new patient { \"timestamp\" : \"2020-01-28 14:29:20\" } info: Searching to check if the patient exists { \"timestamp\" : \"2020-01-28 14:29:20\" } info: Getting http://localhost:8080/baseR4/Patient?identifier = 431287 from server { \"timestamp\" : \"2020-01-28 14:29:20\" } info: Patient [{ \"system\" : \"http://clientregistry.org/openmrs\" , \"value\" : \"431287\" } , { \"system\" : \"http://system1.org\" , \"value\" : \"12349\" , \"period\" : { \"start\" : \"2001-05-06\" } , \"assigner\" : { \"display\" : \"test Org\" }}] doesnt exist, adding to the database { \"timestamp\" : \"2020-01-28 14:29:20\" }","title":"Queries"},{"location":"queries/#queries","text":"","title":"Queries"},{"location":"queries/#certificates-mandatory","text":"A system querying the Client Registry needs a server-issued certificate or it will not be authorized to use the service. The way that this works is that a server creates a certificate for a client. The certificate is signed by the server issuing it. The querying system then uses that certificate that has been issued to them in their requests. The server's public key is used by the querying system to verify that the certificate being sent is how the server verifies that the certificate was created by them. There is a set of generated certificates for testing and demonstrations. They are not appropriate for production.","title":"Certificates (Mandatory)"},{"location":"queries/#a-simple-cli-query","text":"Inside /client-registry/server directory, a cURL query using the provided example JSON file would be: curl --cert sampleclientcertificates/openmrs.p12 --cert-type p12 --cacert certificates/server_cert.pem -d @/Users/richard/src/github.com/openhie/client-registry/DemoData/patient1_openmrs.json -H \"Content-Type: application/json\" -XPOST https://localhost:3000/addPatient Should result in a successful result in stdout: info: Received a request to add new patient { \"timestamp\" : \"2020-01-28 14:29:20\" } info: Searching to check if the patient exists { \"timestamp\" : \"2020-01-28 14:29:20\" } info: Getting http://localhost:8080/baseR4/Patient?identifier = 431287 from server { \"timestamp\" : \"2020-01-28 14:29:20\" } info: Patient [{ \"system\" : \"http://clientregistry.org/openmrs\" , \"value\" : \"431287\" } , { \"system\" : \"http://system1.org\" , \"value\" : \"12349\" , \"period\" : { \"start\" : \"2001-05-06\" } , \"assigner\" : { \"display\" : \"test Org\" }}] doesnt exist, adding to the database { \"timestamp\" : \"2020-01-28 14:29:20\" }","title":"A Simple CLI Query"},{"location":"workflow/","text":"Workflow \u00b6 Big picture \u00b6 The process for a point-of-service system like an EMR to get a unique ID from the Client Registry is straightforward though it looks complicated at first. Let's break this down. A POS provides some demographic information to the Client Registry. The Client Registry looks for an existing record matching that patient. If there is an existing record, the Client Registry provides the unique ID back to the POS. If there is not an existing record, the Client Registry makes a new one and provides a unique ID back to the POS. In Greater Detail \u00b6 When requests are submitted with demographic data in a FHIR message, the Client Registry reads an submitting system's ID of that patient. The Client Registry searches for that submitting system's ID in its records. This happens regardless if it is a new patient or update of existing patient. When the submitting system's ID matches an existing record, the Client Registry updates the patient demographic information of that record with changes submitted. Once the update is complete, the existing record linkages may affected. This is because algorithms may not continue to link records as before because details have changed. Therefore, the Client Registry will pool all patients that were previously matched and break all the matches. The Client Registry will rerun matching algorithms again to see what matches are currently true matches of the patient. Then the Client Registry will be updated with the true matches given the changes in demographic data. Another scenario is when the Client Registry searches and doesn't find anyone already with same submitting system's ID. If there is not existing match, the Client Registry runs the matching algorithms for existing patients who matches that patient and will provide record linkages with other records. Requirements \u00b6 In order for this process to work as expected, there are some requirements: Requests sent to the Client Registry must be made of FHIR messages. FHIR is a popular specification for accessing an API for providing data in health systems. Messages must support FHIR R4.","title":"Workflow"},{"location":"workflow/#workflow","text":"","title":"Workflow"},{"location":"workflow/#big-picture","text":"The process for a point-of-service system like an EMR to get a unique ID from the Client Registry is straightforward though it looks complicated at first. Let's break this down. A POS provides some demographic information to the Client Registry. The Client Registry looks for an existing record matching that patient. If there is an existing record, the Client Registry provides the unique ID back to the POS. If there is not an existing record, the Client Registry makes a new one and provides a unique ID back to the POS.","title":"Big picture"},{"location":"workflow/#in-greater-detail","text":"When requests are submitted with demographic data in a FHIR message, the Client Registry reads an submitting system's ID of that patient. The Client Registry searches for that submitting system's ID in its records. This happens regardless if it is a new patient or update of existing patient. When the submitting system's ID matches an existing record, the Client Registry updates the patient demographic information of that record with changes submitted. Once the update is complete, the existing record linkages may affected. This is because algorithms may not continue to link records as before because details have changed. Therefore, the Client Registry will pool all patients that were previously matched and break all the matches. The Client Registry will rerun matching algorithms again to see what matches are currently true matches of the patient. Then the Client Registry will be updated with the true matches given the changes in demographic data. Another scenario is when the Client Registry searches and doesn't find anyone already with same submitting system's ID. If there is not existing match, the Client Registry runs the matching algorithms for existing patients who matches that patient and will provide record linkages with other records.","title":"In Greater Detail"},{"location":"workflow/#requirements","text":"In order for this process to work as expected, there are some requirements: Requests sent to the Client Registry must be made of FHIR messages. FHIR is a popular specification for accessing an API for providing data in health systems. Messages must support FHIR R4.","title":"Requirements"}]}